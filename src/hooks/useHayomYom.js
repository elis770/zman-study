import { useState, useEffect } from 'react';
import { HDate } from '@hebcal/core';

// Maps HDate month numbers to the JSON filenames generated by the scraper
const hebrewMonthFiles = {
  1: 'nisan',
  2: 'iyar',
  3: 'sivan',
  4: 'tamuz',
  5: 'av',
  6: 'elul',
  7: 'tishrei',
  8: 'cheshvan',
  9: 'kislev',
  10: 'tevet',
  11: 'shevat',
  12: 'adar', // Default for non-leap year, will be adjusted below
  13: 'adar_ii',
};

const useHayomYom = () => {
  const [study, setStudy] = useState({ title: null, text: null });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const loadStudy = async () => {
      try {
        setLoading(true);
        setError(null);

        const today = new HDate();
        const day = today.getDate();
        const month = today.getMonth();
        
        let monthFileName = hebrewMonthFiles[month];
        if (today.isLeapYear() && month === 12) {
          monthFileName = 'adar_i';
        }

        const response = await fetch(`/json-haiom-iom/${monthFileName}.json`);
        if (!response.ok) throw new Error(`No se pudo cargar ${monthFileName}.json`);
        
        const monthData = await response.json();
        const dayStudy = monthData.find(d => d.day === day);

        if (dayStudy) setStudy({ title: dayStudy.title, text: dayStudy.text });
        else throw new Error(`No se encontró el estudio para el día ${day} de ${monthFileName}.`);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    loadStudy();
  }, []);

  return { ...study, loading, error };
};

export default useHayomYom;